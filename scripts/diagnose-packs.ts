/**
 * Script para diagnosticar problemas con packs
 * Ejecutar: npx tsx scripts/diagnose-packs.ts
 */

import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function diagnosePacks() {
  try {
    console.log('üîç Diagnosticando sistema de packs...\n')

    // 1. Verificar establecimientos
    const establishments = await prisma.establishment.findMany({
      select: {
        id: true,
        name: true,
        userId: true,
        isActive: true,
        verificationStatus: true,
        _count: {
          select: {
            packs: true,
          },
        },
      },
    })

    console.log(`üìä Establecimientos encontrados: ${establishments.length}`)
    establishments.forEach((est, index) => {
      console.log(`\n${index + 1}. ${est.name}`)
      console.log(`   ID: ${est.id}`)
      console.log(`   User ID: ${est.userId}`)
      console.log(`   Activo: ${est.isActive ? '‚úÖ' : '‚ùå'}`)
      console.log(`   Estado: ${est.verificationStatus}`)
      console.log(`   Packs: ${est._count.packs}`)
    })

    // 2. Verificar todos los packs
    const allPacks = await prisma.pack.findMany({
      include: {
        establishment: {
          select: {
            name: true,
            isActive: true,
            verificationStatus: true,
          },
        },
      },
      orderBy: {
        createdAt: 'desc',
      },
    })

    console.log(`\n\nüì¶ Total de packs en DB: ${allPacks.length}`)
    
    if (allPacks.length === 0) {
      console.log('\n‚ö†Ô∏è  NO HAY PACKS EN LA BASE DE DATOS')
      console.log('\nPosibles causas:')
      console.log('   1. No se han creado packs desde el dashboard')
      console.log('   2. Error en la validaci√≥n al crear packs')
      console.log('   3. Problema con el establecimiento')
    } else {
      console.log('\nüìã Detalles de los packs:')
      allPacks.forEach((pack, index) => {
        const now = new Date()
        const isExpired = new Date(pack.availableUntil) < now
        const isAvailable = new Date(pack.availableFrom) <= now
        const hasStock = pack.quantity > 0

        console.log(`\n${index + 1}. ${pack.title}`)
        console.log(`   ID: ${pack.id}`)
        console.log(`   Restaurante: ${pack.establishment.name}`)
        console.log(`   Activo: ${pack.isActive ? '‚úÖ' : '‚ùå'}`)
        console.log(`   Cantidad: ${pack.quantity}`)
        console.log(`   Precio: $${pack.discountedPrice} (antes: $${pack.originalPrice})`)
        console.log(`   Disponible desde: ${pack.availableFrom.toLocaleString('es-CO')}`)
        console.log(`   Disponible hasta: ${pack.availableUntil.toLocaleString('es-CO')}`)
        console.log(`   Horario recogida: ${pack.pickupTimeStart} - ${pack.pickupTimeEnd}`)
        console.log(`   Estado restaurante: ${pack.establishment.verificationStatus}`)
        console.log(`   Restaurante activo: ${pack.establishment.isActive ? '‚úÖ' : '‚ùå'}`)
        console.log(`\n   Diagn√≥stico:`)
        console.log(`      ${isExpired ? '‚ùå' : '‚úÖ'} ${isExpired ? 'EXPIRADO' : 'No expirado'}`)
        console.log(`      ${isAvailable ? '‚úÖ' : '‚è≥'} ${isAvailable ? 'Disponible ahora' : 'A√∫n no disponible'}`)
        console.log(`      ${hasStock ? '‚úÖ' : '‚ùå'} ${hasStock ? 'Con stock' : 'Sin stock'}`)
        console.log(`      ${pack.establishment.verificationStatus === 'APPROVED' ? '‚úÖ' : '‚ùå'} Restaurante ${pack.establishment.verificationStatus}`)
      })
    }

    // 3. Verificar packs activos y disponibles
    const activePacks = await prisma.pack.findMany({
      where: {
        isActive: true,
        quantity: { gt: 0 },
        availableFrom: { lte: new Date() },
        availableUntil: { gte: new Date() },
        establishment: {
          isActive: true,
          verificationStatus: 'APPROVED',
        },
      },
    })

    console.log(`\n\n‚úÖ Packs activos y disponibles AHORA: ${activePacks.length}`)
    
    if (activePacks.length === 0 && allPacks.length > 0) {
      console.log('\n‚ö†Ô∏è  HAY PACKS PERO NINGUNO EST√Å DISPONIBLE')
      console.log('\nPosibles razones:')
      console.log('   ‚Ä¢ Packs expirados (availableUntil < ahora)')
      console.log('   ‚Ä¢ Packs futuros (availableFrom > ahora)')
      console.log('   ‚Ä¢ Sin stock (quantity = 0)')
      console.log('   ‚Ä¢ Restaurante no aprobado')
      console.log('   ‚Ä¢ Pack o restaurante inactivo')
    }

    // 4. Verificar usuarios con rol ESTABLISHMENT
    const estUsers = await prisma.user.findMany({
      where: { role: 'ESTABLISHMENT' },
      select: {
        id: true,
        email: true,
        name: true,
        establishment: {
          select: {
            id: true,
            name: true,
            verificationStatus: true,
          },
        },
      },
    })

    console.log(`\n\nüë• Usuarios con rol ESTABLISHMENT: ${estUsers.length}`)
    estUsers.forEach((user, index) => {
      console.log(`\n${index + 1}. ${user.email}`)
      console.log(`   Nombre: ${user.name || 'Sin nombre'}`)
      console.log(`   Tiene establecimiento: ${user.establishment ? '‚úÖ' : '‚ùå'}`)
      if (user.establishment) {
        console.log(`   Establecimiento: ${user.establishment.name}`)
        console.log(`   Estado: ${user.establishment.verificationStatus}`)
      }
    })

    // Resumen
    console.log('\n' + '='.repeat(60))
    console.log('üìä RESUMEN DEL DIAGN√ìSTICO')
    console.log('='.repeat(60))
    console.log(`Total establecimientos: ${establishments.length}`)
    console.log(`Total packs: ${allPacks.length}`)
    console.log(`Packs disponibles ahora: ${activePacks.length}`)
    console.log(`Usuarios ESTABLISHMENT: ${estUsers.length}`)

    if (allPacks.length === 0) {
      console.log('\nüî¥ PROBLEMA: No hay packs en la base de datos')
      console.log('\nüí° Soluci√≥n:')
      console.log('   1. Inicia sesi√≥n como restaurante')
      console.log('   2. Ve al dashboard')
      console.log('   3. Crea un pack nuevo')
      console.log('   4. Aseg√∫rate de que:')
      console.log('      - La fecha "Disponible desde" sea HOY o en el futuro')
      console.log('      - La fecha "Disponible hasta" sea despu√©s de "Disponible desde"')
      console.log('      - El precio con descuento sea menor que el precio original')
      console.log('      - La cantidad sea mayor a 0')
    } else if (activePacks.length === 0) {
      console.log('\nüü° PROBLEMA: Hay packs pero ninguno est√° disponible')
      console.log('\nüí° Revisa los diagn√≥sticos individuales arriba')
    } else {
      console.log('\nüü¢ TODO BIEN: Hay packs disponibles')
    }

    console.log()

  } catch (error) {
    console.error('‚ùå Error:', error)
  } finally {
    await prisma.$disconnect()
  }
}

diagnosePacks()
